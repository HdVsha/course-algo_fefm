Вопросы к устному зачёту
########################

:date: 2019-12-16 09:00
:summary: Вопросы билетов устного зачёта, особенности процедуры сдачи.
:status: draft

.. default-role:: code
.. contents:: Содержание


Расписание
==========

Зачёт проходит на неделе с 16 по 20 декабря по расписанию лабораторных работ и в тех же аудиториях.
Апелляция в пятницу на лекции.

Допускается сдача зачёта с чужой группой, но *о таком переносе обязательно нужно предупредить* своего преподавателя и преподавателя группы, к которой вы собираетесь прийти на сдачу.


Процедура приёма зачёта
-----------------------

Оценка по информатике ставится в результате устного ответа на дифференцированном зачёте. Личное присутствие на зачёте для постановки оценки обязательно!
Преподаватель учебной группы имеет право в одной учебной группе поставить одному студенту "автомат".

Сдача происходит по билетам. В билете содержится два вопроса из основного списка. На подготовку студенту отводится не более 20 минут. Преподаватель слушает ответы на вопросы в билете, а также может задать от одного до трёх дополнительных вопросов, как из основного списка, так и любых других по программе курса.

Использование на зачёте любых цифровых и бумажных носителей информации  студентом недопустимо! Допустимы только ручка и чистая бумага.

**NB!**
На основании систематического списывания обучающимся при работе в семестре преподаватель учебной группы имеет право не допустить студента к зачёту в общем порядке. В этом случае студент всё равно приходит на зачёт, но вначале пишет индивидуальный контест, а затем сдаёт зачёт комиссии из двух-трёх преподавателей. Пересдача в таких случаях также сдаётся комиссии преподавателей.

Список вопросов
---------------

#. Ссылочная модель данных в Python. Изменяемые и неизменяемые типы данных. Проблема копирования. Сборщик мусора.
#. Операторы присваивания в Python. Множественное присваивание и варианты обмена переменных значениями.
#. Операторы if, elif, else. Цикл while, операторы break, continue, else.
#. Цикл for, операторы break, continue, else. Функция range().
#. Проверка последовательности чисел на наличие элемента с заданными свойствами и на соответствие всех элементов заданному свойству.
#. Однопроходные алгоритмы обработки последовательности: подсчёт, сумма, произведение.
#. Поиск максимума и подсчёт количества элементов, равных максимальному.
#. Нахождение трёх максимальных элементов в последовательности за один проход.
#. Поиск местоположения максимума в последовательности за один проход.
#. Проверка простоты числа. Метод грубой силы.
#. Разложение числа на множители.
#. Решето Эратосфена. Оценка временной сложности алгоритма.
#. Добавление и удаление элемента в начале и в конце массива «вручную» (без append, insert, присваивания в срез и т. п.).
#. Алгоритм обращения чисел в массиве. Реализация циклом, без срезов.
#. Алгоритм циклического сдвига в массиве. Реализация циклом, без срезов.
#. Задача упорядочивания элементов в массиве. Оценка временной сложности задачи в общем случае. Проверка упорядоченности массива за O(N).
#. Сортировка вставками. Оценка временной сложности алгоритма.
#. Сортировка выбором. Оценка временной сложности алгоритма.
#. Сортировка методом пузырька. Оценка временной сложности алгоритма.
#. Сортировка подсчётом. Оценка временной сложности алгоритма.
#. Поразрядная сортировка (со старшего разряда, с младшего разряда). Оценка временной сложности алгоритма.
#. Быстрая сортировка Хоара. Временная сложность алгоритма (без док-ва).
#. Сортировка слиянием. Оценка временной сложности алгоритма.
#. Двоичный поиск в отсортированном массиве (левый и правый). Оценка временной сложности алгоритма. Двоичный поиск по ответу.
#. Рекурсия. Прямой и обратный ход рекурсии. Стек вызовов при рекурсии. Вычисление факториала.
#. Алгоритм Евклида. Доказательство корректности.
#. Быстрое возведение в степень.
#. Вычисление чисел Фибоначчи.
#. Ханойские башни.
#. Рекурсивная генерация всех чисел длины M.
#. Генерация всех перестановок (рекурсивная).
#. Динамическое программирование. Решение задач ДП циклами и рекурсией. Рекурсия с мемоизацией (ленивая динамика).
#. Задача о количестве траекторий Кузнечика на числовой прямой.
#. Задача о траектории наименьшей стоимости для Кузнечика. Восстановление траектории наименьшей стоимости.
#. Вычисление расстояния Левенштейна.
#. Наибольшая общая подпоследовательность.
#. Наибольшая возрастающая подпоследовательность.
#. Проверки корректности скобочной последовательности с помощью стека.
#. Обратная Польская нотация. Вычисление выражения при помощи стека.
#. Наивный поиск подстроки в строке. Реализация без использования стандартных методов str.
#. Z-функция строки. Наивное вычисление и его оптимизация. Z-алгоритм. Оценка временной сложности алгоритма.
#. Префикс-функция. Алгоритм Кнута-Морриса-Пратта. Оценка временной сложности алгоритма.


Оценка на зачёте
----------------

Основанием для рейтинговой оценки служат три оценки:

#. Контрольная №1
#. Контрольная №2
#. Средняя оценка за все контесты

Преподаватель, экзаменующий студента, видит все эти оценки по отдельности, а также рекомендуемую итоговую оценку, которая вычисляется по этим пяти оценкам автоматически. Исходя из ответа студента итоговая оценка в зачётку может быть отклонена от рекомендуемой на ±2 балла (по 10-балльной шкале). Если преподаватель хочет повысить или понизить оценку на большее число баллов, он советуется со вторым преподавателем, присутствующим на зачёте.

Студент при несогласии с итоговой оценкой может потребовать апелляции у лектора, но за это придётся рискнуть 1 баллом. Если апелляция не будет успешной, и лектор полностью согласится с преподавателем-экзаменатором в его оценке знаний студента, то итоговая оценка будет *понижена* на 1 балл (по 10-балльной шкале).

Апелляция проходит в пятницу зачётной недели.


Почему дифференцированный зачёт сдаётся устно
---------------------------------------------

#. Во-первых, это возможность проверить знание студентом тем, вошедших в курс лекций, но не вошедших прямо в лабораторные работы.
#. Во-вторых, устный ответ расширяет у студента актив понятийного аппарата информатики, развивает умение связно излагать свои мысли на языке предмета.
#. В-третьих, устный ответ даёт возможность преподавателю осознать уровень самостоятельности студента при написании им лабораторных работ.
#. В-четвёртых, устный ответ позволяет студенту, продемонстрировавшему свои знания на зачёте, повысить оценку, которая получается исходя из рейтинга за работы в семестре.
#. И в пятых, повторение материала лекций в конце семестра приводит к лучшему запоминанию материала и откладыванию его в долгую память.

Успехов в подготовке к зачёту!
